// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	mock "github.com/stretchr/testify/mock"
	"github.com/trashscanner/trashscanner_api/internal/models"
)

// NewFileStore creates a new instance of FileStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileStore {
	mock := &FileStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// FileStore is an autogenerated mock type for the FileStore type
type FileStore struct {
	mock.Mock
}

type FileStore_Expecter struct {
	mock *mock.Mock
}

func (_m *FileStore) EXPECT() *FileStore_Expecter {
	return &FileStore_Expecter{mock: &_m.Mock}
}

// DeleteAvatar provides a mock function for the type FileStore
func (_mock *FileStore) DeleteAvatar(ctx context.Context, avatarKey string) error {
	ret := _mock.Called(ctx, avatarKey)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAvatar")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, avatarKey)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FileStore_DeleteAvatar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAvatar'
type FileStore_DeleteAvatar_Call struct {
	*mock.Call
}

// DeleteAvatar is a helper method to define mock.On call
//   - ctx context.Context
//   - avatarKey string
func (_e *FileStore_Expecter) DeleteAvatar(ctx interface{}, avatarKey interface{}) *FileStore_DeleteAvatar_Call {
	return &FileStore_DeleteAvatar_Call{Call: _e.mock.On("DeleteAvatar", ctx, avatarKey)}
}

func (_c *FileStore_DeleteAvatar_Call) Run(run func(ctx context.Context, avatarKey string)) *FileStore_DeleteAvatar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FileStore_DeleteAvatar_Call) Return(err error) *FileStore_DeleteAvatar_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FileStore_DeleteAvatar_Call) RunAndReturn(run func(ctx context.Context, avatarKey string) error) *FileStore_DeleteAvatar_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAvatar provides a mock function for the type FileStore
func (_mock *FileStore) UpdateAvatar(ctx context.Context, user *models.User, file *models.File) error {
	ret := _mock.Called(ctx, user, file)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAvatar")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.User, *models.File) error); ok {
		r0 = returnFunc(ctx, user, file)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FileStore_UpdateAvatar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAvatar'
type FileStore_UpdateAvatar_Call struct {
	*mock.Call
}

// UpdateAvatar is a helper method to define mock.On call
//   - ctx context.Context
//   - user *models.User
//   - file *models.File
func (_e *FileStore_Expecter) UpdateAvatar(ctx interface{}, user interface{}, file interface{}) *FileStore_UpdateAvatar_Call {
	return &FileStore_UpdateAvatar_Call{Call: _e.mock.On("UpdateAvatar", ctx, user, file)}
}

func (_c *FileStore_UpdateAvatar_Call) Run(run func(ctx context.Context, user *models.User, file *models.File)) *FileStore_UpdateAvatar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.User
		if args[1] != nil {
			arg1 = args[1].(*models.User)
		}
		var arg2 *models.File
		if args[2] != nil {
			arg2 = args[2].(*models.File)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *FileStore_UpdateAvatar_Call) Return(err error) *FileStore_UpdateAvatar_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FileStore_UpdateAvatar_Call) RunAndReturn(run func(ctx context.Context, user *models.User, file *models.File) error) *FileStore_UpdateAvatar_Call {
	_c.Call.Return(run)
	return _c
}

// UploadScan provides a mock function for the type FileStore
func (_mock *FileStore) UploadScan(ctx context.Context, userID string, file *models.File) (string, error) {
	ret := _mock.Called(ctx, userID, file)

	if len(ret) == 0 {
		panic("no return value specified for UploadScan")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *models.File) (string, error)); ok {
		return returnFunc(ctx, userID, file)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *models.File) string); ok {
		r0 = returnFunc(ctx, userID, file)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *models.File) error); ok {
		r1 = returnFunc(ctx, userID, file)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FileStore_UploadScan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadScan'
type FileStore_UploadScan_Call struct {
	*mock.Call
}

// UploadScan is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - file *models.File
func (_e *FileStore_Expecter) UploadScan(ctx interface{}, userID interface{}, file interface{}) *FileStore_UploadScan_Call {
	return &FileStore_UploadScan_Call{Call: _e.mock.On("UploadScan", ctx, userID, file)}
}

func (_c *FileStore_UploadScan_Call) Run(run func(ctx context.Context, userID string, file *models.File)) *FileStore_UploadScan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *models.File
		if args[2] != nil {
			arg2 = args[2].(*models.File)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *FileStore_UploadScan_Call) Return(s string, err error) *FileStore_UploadScan_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *FileStore_UploadScan_Call) RunAndReturn(run func(ctx context.Context, userID string, file *models.File) (string, error)) *FileStore_UploadScan_Call {
	_c.Call.Return(run)
	return _c
}
