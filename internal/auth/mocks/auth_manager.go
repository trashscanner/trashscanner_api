// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	mock "github.com/stretchr/testify/mock"
	"github.com/trashscanner/trashscanner_api/internal/auth"
	"github.com/trashscanner/trashscanner_api/internal/models"
)

// NewAuthManager creates a new instance of AuthManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthManager {
	mock := &AuthManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AuthManager is an autogenerated mock type for the AuthManager type
type AuthManager struct {
	mock.Mock
}

type AuthManager_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthManager) EXPECT() *AuthManager_Expecter {
	return &AuthManager_Expecter{mock: &_m.Mock}
}

// CreateNewPair provides a mock function for the type AuthManager
func (_mock *AuthManager) CreateNewPair(ctx context.Context, user models.User) (*auth.TokenPair, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewPair")
	}

	var r0 *auth.TokenPair
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.User) (*auth.TokenPair, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.User) *auth.TokenPair); ok {
		r0 = returnFunc(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.TokenPair)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AuthManager_CreateNewPair_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNewPair'
type AuthManager_CreateNewPair_Call struct {
	*mock.Call
}

// CreateNewPair is a helper method to define mock.On call
//   - ctx context.Context
//   - user models.User
func (_e *AuthManager_Expecter) CreateNewPair(ctx interface{}, user interface{}) *AuthManager_CreateNewPair_Call {
	return &AuthManager_CreateNewPair_Call{Call: _e.mock.On("CreateNewPair", ctx, user)}
}

func (_c *AuthManager_CreateNewPair_Call) Run(run func(ctx context.Context, user models.User)) *AuthManager_CreateNewPair_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 models.User
		if args[1] != nil {
			arg1 = args[1].(models.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AuthManager_CreateNewPair_Call) Return(tokenPair *auth.TokenPair, err error) *AuthManager_CreateNewPair_Call {
	_c.Call.Return(tokenPair, err)
	return _c
}

func (_c *AuthManager_CreateNewPair_Call) RunAndReturn(run func(ctx context.Context, user models.User) (*auth.TokenPair, error)) *AuthManager_CreateNewPair_Call {
	_c.Call.Return(run)
	return _c
}

// Parse provides a mock function for the type AuthManager
func (_mock *AuthManager) Parse(tokenStr string) (*auth.Claims, error) {
	ret := _mock.Called(tokenStr)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 *auth.Claims
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*auth.Claims, error)); ok {
		return returnFunc(tokenStr)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *auth.Claims); ok {
		r0 = returnFunc(tokenStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Claims)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(tokenStr)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AuthManager_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type AuthManager_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
//   - tokenStr string
func (_e *AuthManager_Expecter) Parse(tokenStr interface{}) *AuthManager_Parse_Call {
	return &AuthManager_Parse_Call{Call: _e.mock.On("Parse", tokenStr)}
}

func (_c *AuthManager_Parse_Call) Run(run func(tokenStr string)) *AuthManager_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *AuthManager_Parse_Call) Return(claims *auth.Claims, err error) *AuthManager_Parse_Call {
	_c.Call.Return(claims, err)
	return _c
}

func (_c *AuthManager_Parse_Call) RunAndReturn(run func(tokenStr string) (*auth.Claims, error)) *AuthManager_Parse_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function for the type AuthManager
func (_mock *AuthManager) Refresh(ctx context.Context, refreshToken string) (*auth.TokenPair, error) {
	ret := _mock.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 *auth.TokenPair
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*auth.TokenPair, error)); ok {
		return returnFunc(ctx, refreshToken)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *auth.TokenPair); ok {
		r0 = returnFunc(ctx, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.TokenPair)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AuthManager_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type AuthManager_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *AuthManager_Expecter) Refresh(ctx interface{}, refreshToken interface{}) *AuthManager_Refresh_Call {
	return &AuthManager_Refresh_Call{Call: _e.mock.On("Refresh", ctx, refreshToken)}
}

func (_c *AuthManager_Refresh_Call) Run(run func(ctx context.Context, refreshToken string)) *AuthManager_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AuthManager_Refresh_Call) Return(tokenPair *auth.TokenPair, err error) *AuthManager_Refresh_Call {
	_c.Call.Return(tokenPair, err)
	return _c
}

func (_c *AuthManager_Refresh_Call) RunAndReturn(run func(ctx context.Context, refreshToken string) (*auth.TokenPair, error)) *AuthManager_Refresh_Call {
	_c.Call.Return(run)
	return _c
}
