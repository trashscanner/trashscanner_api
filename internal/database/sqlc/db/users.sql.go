// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name,
    login,
    hashed_password
) VALUES (
    $1, $2, $3
) RETURNING id
`

type CreateUserParams struct {
	Name           string `json:"name"`
	Login          string `json:"login"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Login, arg.HashedPassword)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET deleted = TRUE, updated_at = now()
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, login, name, hashed_password, avatar, deleted, created_at, updated_at FROM users
WHERE id = $1 AND deleted = FALSE
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Name,
		&i.HashedPassword,
		&i.Avatar,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByLogin = `-- name: GetUserByLogin :one
SELECT id, login, name, hashed_password, avatar, deleted, created_at, updated_at FROM users
WHERE login = $1 AND deleted = FALSE
`

func (q *Queries) GetUserByLogin(ctx context.Context, login string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByLogin, login)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Name,
		&i.HashedPassword,
		&i.Avatar,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET name = $1, updated_at = now()
WHERE id = $2
`

type UpdateUserParams struct {
	Name string    `json:"name"`
	ID   uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.Name, arg.ID)
	return err
}

const updateUserAvatar = `-- name: UpdateUserAvatar :exec
UPDATE users
SET avatar = $1, updated_at = now()
WHERE id = $2
`

type UpdateUserAvatarParams struct {
	Avatar *string   `json:"avatar"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUserAvatar(ctx context.Context, arg UpdateUserAvatarParams) error {
	_, err := q.db.Exec(ctx, updateUserAvatar, arg.Avatar, arg.ID)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET hashed_password = $1, updated_at = now()
WHERE id = $2
`

type UpdateUserPasswordParams struct {
	HashedPassword string    `json:"hashed_password"`
	ID             uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.HashedPassword, arg.ID)
	return err
}
