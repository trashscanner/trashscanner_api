// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: login_history.sql

package db

import (
	"context"
	"net/netip"

	"github.com/google/uuid"
)

const createLoginHistory = `-- name: CreateLoginHistory :one
INSERT INTO login_history (
    user_id,
    login_attempt,
    success,
    failure_reason,
    ip_address,
    user_agent,
    location
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id
`

type CreateLoginHistoryParams struct {
	UserID        uuid.UUID   `json:"user_id"`
	LoginAttempt  string      `json:"login_attempt"`
	Success       bool        `json:"success"`
	FailureReason *string     `json:"failure_reason"`
	IpAddress     *netip.Addr `json:"ip_address"`
	UserAgent     *string     `json:"user_agent"`
	Location      *string     `json:"location"`
}

func (q *Queries) CreateLoginHistory(ctx context.Context, arg CreateLoginHistoryParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createLoginHistory,
		arg.UserID,
		arg.LoginAttempt,
		arg.Success,
		arg.FailureReason,
		arg.IpAddress,
		arg.UserAgent,
		arg.Location,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getLoginHistoryByUser = `-- name: GetLoginHistoryByUser :many
SELECT id, user_id, login_attempt, success, failure_reason, ip_address, user_agent, location, created_at FROM login_history
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetLoginHistoryByUserParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) GetLoginHistoryByUser(ctx context.Context, arg GetLoginHistoryByUserParams) ([]LoginHistory, error) {
	rows, err := q.db.Query(ctx, getLoginHistoryByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LoginHistory{}
	for rows.Next() {
		var i LoginHistory
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.LoginAttempt,
			&i.Success,
			&i.FailureReason,
			&i.IpAddress,
			&i.UserAgent,
			&i.Location,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
