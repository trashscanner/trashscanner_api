// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: predictions.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const completePrediction = `-- name: CompletePrediction :exec
UPDATE predictions
SET status = $1, result = $2, error = $3, updated_at = now()
WHERE id = $4
`

type CompletePredictionParams struct {
	Status string    `json:"status"`
	Result *string   `json:"result"`
	Error  *string   `json:"error"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) CompletePrediction(ctx context.Context, arg CompletePredictionParams) error {
	_, err := q.db.Exec(ctx, completePrediction,
		arg.Status,
		arg.Result,
		arg.Error,
		arg.ID,
	)
	return err
}

const createNewPrediction = `-- name: CreateNewPrediction :one
INSERT INTO predictions (
    user_id,
    trash_scan,
    status
) VALUES (
    $1, $2, $3
) RETURNING id
`

type CreateNewPredictionParams struct {
	UserID    uuid.UUID `json:"user_id"`
	TrashScan string    `json:"trash_scan"`
	Status    string    `json:"status"`
}

func (q *Queries) CreateNewPrediction(ctx context.Context, arg CreateNewPredictionParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createNewPrediction, arg.UserID, arg.TrashScan, arg.Status)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getPrediction = `-- name: GetPrediction :one
SELECT id, user_id, trash_scan, status, result, error, created_at, updated_at FROM predictions
WHERE id = $1
`

func (q *Queries) GetPrediction(ctx context.Context, id uuid.UUID) (Prediction, error) {
	row := q.db.QueryRow(ctx, getPrediction, id)
	var i Prediction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TrashScan,
		&i.Status,
		&i.Result,
		&i.Error,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPredictionsByUserID = `-- name: GetPredictionsByUserID :many
SELECT id, user_id, trash_scan, status, result, error, created_at, updated_at FROM predictions
WHERE user_id = $1
ORDER BY updated_at DESC
LIMIT $2 OFFSET $3
`

type GetPredictionsByUserIDParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) GetPredictionsByUserID(ctx context.Context, arg GetPredictionsByUserIDParams) ([]Prediction, error) {
	rows, err := q.db.Query(ctx, getPredictionsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Prediction{}
	for rows.Next() {
		var i Prediction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TrashScan,
			&i.Status,
			&i.Result,
			&i.Error,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
