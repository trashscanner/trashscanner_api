// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: refresh_tokens.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (
    user_id,
    token_family,
    token_hash,
    expires_at
) VALUES (
    $1, $2, $3, $4
) RETURNING id
`

type CreateRefreshTokenParams struct {
	UserID      uuid.UUID `json:"user_id"`
	TokenFamily uuid.UUID `json:"token_family"`
	TokenHash   string    `json:"token_hash"`
	ExpiresAt   time.Time `json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createRefreshToken,
		arg.UserID,
		arg.TokenFamily,
		arg.TokenHash,
		arg.ExpiresAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getActiveTokensByUser = `-- name: GetActiveTokensByUser :many
SELECT id, user_id, token_family, token_hash, expires_at, revoked, revoked_at, created_at, updated_at FROM refresh_tokens
WHERE user_id = $1 AND revoked = FALSE AND expires_at > now()
ORDER BY created_at DESC
`

func (q *Queries) GetActiveTokensByUser(ctx context.Context, userID uuid.UUID) ([]RefreshToken, error) {
	rows, err := q.db.Query(ctx, getActiveTokensByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RefreshToken{}
	for rows.Next() {
		var i RefreshToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TokenFamily,
			&i.TokenHash,
			&i.ExpiresAt,
			&i.Revoked,
			&i.RevokedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRefreshTokenByHash = `-- name: GetRefreshTokenByHash :one
SELECT id, user_id, token_family, token_hash, expires_at, revoked, revoked_at, created_at, updated_at FROM refresh_tokens
WHERE token_hash = $1 AND revoked = FALSE AND expires_at > now()
LIMIT 1
`

func (q *Queries) GetRefreshTokenByHash(ctx context.Context, tokenHash string) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, getRefreshTokenByHash, tokenHash)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenFamily,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.Revoked,
		&i.RevokedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const revokeAllUserTokens = `-- name: RevokeAllUserTokens :exec
UPDATE refresh_tokens
SET revoked = TRUE, revoked_at = now(), updated_at = now()
WHERE user_id = $1 AND revoked = FALSE
`

func (q *Queries) RevokeAllUserTokens(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, revokeAllUserTokens, userID)
	return err
}

const revokeTokenFamily = `-- name: RevokeTokenFamily :exec
UPDATE refresh_tokens
SET revoked = TRUE, revoked_at = now(), updated_at = now()
WHERE token_family = $1
`

func (q *Queries) RevokeTokenFamily(ctx context.Context, tokenFamily uuid.UUID) error {
	_, err := q.db.Exec(ctx, revokeTokenFamily, tokenFamily)
	return err
}
