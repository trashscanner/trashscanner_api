// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: stats.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createStats = `-- name: CreateStats :one
INSERT INTO stats (
    user_id
) VALUES (
    $1
) RETURNING id
`

func (q *Queries) CreateStats(ctx context.Context, userID uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createStats, userID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getStatsByUserID = `-- name: GetStatsByUserID :one
SELECT id, user_id, status, rating, files_scanned, total_weight, achievements, trash_by_types, created_at, updated_at FROM stats
WHERE user_id = $1
`

func (q *Queries) GetStatsByUserID(ctx context.Context, userID uuid.UUID) (Stat, error) {
	row := q.db.QueryRow(ctx, getStatsByUserID, userID)
	var i Stat
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.Rating,
		&i.FilesScanned,
		&i.TotalWeight,
		&i.Achievements,
		&i.TrashByTypes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStats = `-- name: UpdateStats :exec
UPDATE stats
SET
    status = $1,
    rating = $2,
    files_scanned = $3,
    total_weight = $4,
    achievements = $5,
    trash_by_types = $6,
    updated_at = now()
WHERE user_id = $7
`

type UpdateStatsParams struct {
	Status       string    `json:"status"`
	Rating       int32     `json:"rating"`
	FilesScanned int32     `json:"files_scanned"`
	TotalWeight  float64   `json:"total_weight"`
	Achievements []byte    `json:"achievements"`
	TrashByTypes []byte    `json:"trash_by_types"`
	UserID       uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdateStats(ctx context.Context, arg UpdateStatsParams) error {
	_, err := q.db.Exec(ctx, updateStats,
		arg.Status,
		arg.Rating,
		arg.FilesScanned,
		arg.TotalWeight,
		arg.Achievements,
		arg.TrashByTypes,
		arg.UserID,
	)
	return err
}
