// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
	"github.com/trashscanner/trashscanner_api/internal/database/sqlc/db"
)

// NewQuerier creates a new instance of Querier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Querier {
	mock := &Querier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

type Querier_Expecter struct {
	mock *mock.Mock
}

func (_m *Querier) EXPECT() *Querier_Expecter {
	return &Querier_Expecter{mock: &_m.Mock}
}

// CreateLoginHistory provides a mock function for the type Querier
func (_mock *Querier) CreateLoginHistory(ctx context.Context, arg db.CreateLoginHistoryParams) (uuid.UUID, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateLoginHistory")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateLoginHistoryParams) (uuid.UUID, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateLoginHistoryParams) uuid.UUID); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.CreateLoginHistoryParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Querier_CreateLoginHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLoginHistory'
type Querier_CreateLoginHistory_Call struct {
	*mock.Call
}

// CreateLoginHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateLoginHistoryParams
func (_e *Querier_Expecter) CreateLoginHistory(ctx interface{}, arg interface{}) *Querier_CreateLoginHistory_Call {
	return &Querier_CreateLoginHistory_Call{Call: _e.mock.On("CreateLoginHistory", ctx, arg)}
}

func (_c *Querier_CreateLoginHistory_Call) Run(run func(ctx context.Context, arg db.CreateLoginHistoryParams)) *Querier_CreateLoginHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.CreateLoginHistoryParams
		if args[1] != nil {
			arg1 = args[1].(db.CreateLoginHistoryParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Querier_CreateLoginHistory_Call) Return(uUID uuid.UUID, err error) *Querier_CreateLoginHistory_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *Querier_CreateLoginHistory_Call) RunAndReturn(run func(ctx context.Context, arg db.CreateLoginHistoryParams) (uuid.UUID, error)) *Querier_CreateLoginHistory_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRefreshToken provides a mock function for the type Querier
func (_mock *Querier) CreateRefreshToken(ctx context.Context, arg db.CreateRefreshTokenParams) (uuid.UUID, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefreshToken")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateRefreshTokenParams) (uuid.UUID, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateRefreshTokenParams) uuid.UUID); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.CreateRefreshTokenParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Querier_CreateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRefreshToken'
type Querier_CreateRefreshToken_Call struct {
	*mock.Call
}

// CreateRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateRefreshTokenParams
func (_e *Querier_Expecter) CreateRefreshToken(ctx interface{}, arg interface{}) *Querier_CreateRefreshToken_Call {
	return &Querier_CreateRefreshToken_Call{Call: _e.mock.On("CreateRefreshToken", ctx, arg)}
}

func (_c *Querier_CreateRefreshToken_Call) Run(run func(ctx context.Context, arg db.CreateRefreshTokenParams)) *Querier_CreateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.CreateRefreshTokenParams
		if args[1] != nil {
			arg1 = args[1].(db.CreateRefreshTokenParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Querier_CreateRefreshToken_Call) Return(uUID uuid.UUID, err error) *Querier_CreateRefreshToken_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *Querier_CreateRefreshToken_Call) RunAndReturn(run func(ctx context.Context, arg db.CreateRefreshTokenParams) (uuid.UUID, error)) *Querier_CreateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStats provides a mock function for the type Querier
func (_mock *Querier) CreateStats(ctx context.Context, userID uuid.UUID) (uuid.UUID, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateStats")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (uuid.UUID, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) uuid.UUID); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Querier_CreateStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStats'
type Querier_CreateStats_Call struct {
	*mock.Call
}

// CreateStats is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *Querier_Expecter) CreateStats(ctx interface{}, userID interface{}) *Querier_CreateStats_Call {
	return &Querier_CreateStats_Call{Call: _e.mock.On("CreateStats", ctx, userID)}
}

func (_c *Querier_CreateStats_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *Querier_CreateStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Querier_CreateStats_Call) Return(uUID uuid.UUID, err error) *Querier_CreateStats_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *Querier_CreateStats_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID) (uuid.UUID, error)) *Querier_CreateStats_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type Querier
func (_mock *Querier) CreateUser(ctx context.Context, arg db.CreateUserParams) (uuid.UUID, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateUserParams) (uuid.UUID, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateUserParams) uuid.UUID); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.CreateUserParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Querier_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type Querier_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateUserParams
func (_e *Querier_Expecter) CreateUser(ctx interface{}, arg interface{}) *Querier_CreateUser_Call {
	return &Querier_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, arg)}
}

func (_c *Querier_CreateUser_Call) Run(run func(ctx context.Context, arg db.CreateUserParams)) *Querier_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.CreateUserParams
		if args[1] != nil {
			arg1 = args[1].(db.CreateUserParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Querier_CreateUser_Call) Return(uUID uuid.UUID, err error) *Querier_CreateUser_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *Querier_CreateUser_Call) RunAndReturn(run func(ctx context.Context, arg db.CreateUserParams) (uuid.UUID, error)) *Querier_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type Querier
func (_mock *Querier) DeleteUser(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Querier_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type Querier_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Querier_Expecter) DeleteUser(ctx interface{}, id interface{}) *Querier_DeleteUser_Call {
	return &Querier_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *Querier_DeleteUser_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Querier_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Querier_DeleteUser_Call) Return(err error) *Querier_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Querier_DeleteUser_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *Querier_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveTokensByUser provides a mock function for the type Querier
func (_mock *Querier) GetActiveTokensByUser(ctx context.Context, userID uuid.UUID) ([]db.RefreshToken, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveTokensByUser")
	}

	var r0 []db.RefreshToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]db.RefreshToken, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []db.RefreshToken); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.RefreshToken)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Querier_GetActiveTokensByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveTokensByUser'
type Querier_GetActiveTokensByUser_Call struct {
	*mock.Call
}

// GetActiveTokensByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *Querier_Expecter) GetActiveTokensByUser(ctx interface{}, userID interface{}) *Querier_GetActiveTokensByUser_Call {
	return &Querier_GetActiveTokensByUser_Call{Call: _e.mock.On("GetActiveTokensByUser", ctx, userID)}
}

func (_c *Querier_GetActiveTokensByUser_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *Querier_GetActiveTokensByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Querier_GetActiveTokensByUser_Call) Return(refreshTokens []db.RefreshToken, err error) *Querier_GetActiveTokensByUser_Call {
	_c.Call.Return(refreshTokens, err)
	return _c
}

func (_c *Querier_GetActiveTokensByUser_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID) ([]db.RefreshToken, error)) *Querier_GetActiveTokensByUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetLoginHistoryByUser provides a mock function for the type Querier
func (_mock *Querier) GetLoginHistoryByUser(ctx context.Context, arg db.GetLoginHistoryByUserParams) ([]db.LoginHistory, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetLoginHistoryByUser")
	}

	var r0 []db.LoginHistory
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.GetLoginHistoryByUserParams) ([]db.LoginHistory, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.GetLoginHistoryByUserParams) []db.LoginHistory); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.LoginHistory)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.GetLoginHistoryByUserParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Querier_GetLoginHistoryByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLoginHistoryByUser'
type Querier_GetLoginHistoryByUser_Call struct {
	*mock.Call
}

// GetLoginHistoryByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.GetLoginHistoryByUserParams
func (_e *Querier_Expecter) GetLoginHistoryByUser(ctx interface{}, arg interface{}) *Querier_GetLoginHistoryByUser_Call {
	return &Querier_GetLoginHistoryByUser_Call{Call: _e.mock.On("GetLoginHistoryByUser", ctx, arg)}
}

func (_c *Querier_GetLoginHistoryByUser_Call) Run(run func(ctx context.Context, arg db.GetLoginHistoryByUserParams)) *Querier_GetLoginHistoryByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.GetLoginHistoryByUserParams
		if args[1] != nil {
			arg1 = args[1].(db.GetLoginHistoryByUserParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Querier_GetLoginHistoryByUser_Call) Return(loginHistorys []db.LoginHistory, err error) *Querier_GetLoginHistoryByUser_Call {
	_c.Call.Return(loginHistorys, err)
	return _c
}

func (_c *Querier_GetLoginHistoryByUser_Call) RunAndReturn(run func(ctx context.Context, arg db.GetLoginHistoryByUserParams) ([]db.LoginHistory, error)) *Querier_GetLoginHistoryByUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefreshTokenByHash provides a mock function for the type Querier
func (_mock *Querier) GetRefreshTokenByHash(ctx context.Context, tokenHash string) (db.RefreshToken, error) {
	ret := _mock.Called(ctx, tokenHash)

	if len(ret) == 0 {
		panic("no return value specified for GetRefreshTokenByHash")
	}

	var r0 db.RefreshToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (db.RefreshToken, error)); ok {
		return returnFunc(ctx, tokenHash)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) db.RefreshToken); ok {
		r0 = returnFunc(ctx, tokenHash)
	} else {
		r0 = ret.Get(0).(db.RefreshToken)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, tokenHash)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Querier_GetRefreshTokenByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefreshTokenByHash'
type Querier_GetRefreshTokenByHash_Call struct {
	*mock.Call
}

// GetRefreshTokenByHash is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenHash string
func (_e *Querier_Expecter) GetRefreshTokenByHash(ctx interface{}, tokenHash interface{}) *Querier_GetRefreshTokenByHash_Call {
	return &Querier_GetRefreshTokenByHash_Call{Call: _e.mock.On("GetRefreshTokenByHash", ctx, tokenHash)}
}

func (_c *Querier_GetRefreshTokenByHash_Call) Run(run func(ctx context.Context, tokenHash string)) *Querier_GetRefreshTokenByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Querier_GetRefreshTokenByHash_Call) Return(refreshToken db.RefreshToken, err error) *Querier_GetRefreshTokenByHash_Call {
	_c.Call.Return(refreshToken, err)
	return _c
}

func (_c *Querier_GetRefreshTokenByHash_Call) RunAndReturn(run func(ctx context.Context, tokenHash string) (db.RefreshToken, error)) *Querier_GetRefreshTokenByHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatsByUserID provides a mock function for the type Querier
func (_mock *Querier) GetStatsByUserID(ctx context.Context, userID uuid.UUID) (db.Stat, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetStatsByUserID")
	}

	var r0 db.Stat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.Stat, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.Stat); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Get(0).(db.Stat)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Querier_GetStatsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatsByUserID'
type Querier_GetStatsByUserID_Call struct {
	*mock.Call
}

// GetStatsByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *Querier_Expecter) GetStatsByUserID(ctx interface{}, userID interface{}) *Querier_GetStatsByUserID_Call {
	return &Querier_GetStatsByUserID_Call{Call: _e.mock.On("GetStatsByUserID", ctx, userID)}
}

func (_c *Querier_GetStatsByUserID_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *Querier_GetStatsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Querier_GetStatsByUserID_Call) Return(stat db.Stat, err error) *Querier_GetStatsByUserID_Call {
	_c.Call.Return(stat, err)
	return _c
}

func (_c *Querier_GetStatsByUserID_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID) (db.Stat, error)) *Querier_GetStatsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function for the type Querier
func (_mock *Querier) GetUserByID(ctx context.Context, id uuid.UUID) (db.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 db.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(db.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Querier_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type Querier_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Querier_Expecter) GetUserByID(ctx interface{}, id interface{}) *Querier_GetUserByID_Call {
	return &Querier_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, id)}
}

func (_c *Querier_GetUserByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Querier_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Querier_GetUserByID_Call) Return(user db.User, err error) *Querier_GetUserByID_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *Querier_GetUserByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (db.User, error)) *Querier_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByLogin provides a mock function for the type Querier
func (_mock *Querier) GetUserByLogin(ctx context.Context, login string) (db.User, error) {
	ret := _mock.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByLogin")
	}

	var r0 db.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (db.User, error)); ok {
		return returnFunc(ctx, login)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) db.User); ok {
		r0 = returnFunc(ctx, login)
	} else {
		r0 = ret.Get(0).(db.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, login)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Querier_GetUserByLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByLogin'
type Querier_GetUserByLogin_Call struct {
	*mock.Call
}

// GetUserByLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
func (_e *Querier_Expecter) GetUserByLogin(ctx interface{}, login interface{}) *Querier_GetUserByLogin_Call {
	return &Querier_GetUserByLogin_Call{Call: _e.mock.On("GetUserByLogin", ctx, login)}
}

func (_c *Querier_GetUserByLogin_Call) Run(run func(ctx context.Context, login string)) *Querier_GetUserByLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Querier_GetUserByLogin_Call) Return(user db.User, err error) *Querier_GetUserByLogin_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *Querier_GetUserByLogin_Call) RunAndReturn(run func(ctx context.Context, login string) (db.User, error)) *Querier_GetUserByLogin_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeAllUserTokens provides a mock function for the type Querier
func (_mock *Querier) RevokeAllUserTokens(ctx context.Context, userID uuid.UUID) error {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAllUserTokens")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Querier_RevokeAllUserTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeAllUserTokens'
type Querier_RevokeAllUserTokens_Call struct {
	*mock.Call
}

// RevokeAllUserTokens is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *Querier_Expecter) RevokeAllUserTokens(ctx interface{}, userID interface{}) *Querier_RevokeAllUserTokens_Call {
	return &Querier_RevokeAllUserTokens_Call{Call: _e.mock.On("RevokeAllUserTokens", ctx, userID)}
}

func (_c *Querier_RevokeAllUserTokens_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *Querier_RevokeAllUserTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Querier_RevokeAllUserTokens_Call) Return(err error) *Querier_RevokeAllUserTokens_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Querier_RevokeAllUserTokens_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID) error) *Querier_RevokeAllUserTokens_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeRefreshToken provides a mock function for the type Querier
func (_mock *Querier) RevokeRefreshToken(ctx context.Context, tokenHash string) error {
	ret := _mock.Called(ctx, tokenHash)

	if len(ret) == 0 {
		panic("no return value specified for RevokeRefreshToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, tokenHash)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Querier_RevokeRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeRefreshToken'
type Querier_RevokeRefreshToken_Call struct {
	*mock.Call
}

// RevokeRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenHash string
func (_e *Querier_Expecter) RevokeRefreshToken(ctx interface{}, tokenHash interface{}) *Querier_RevokeRefreshToken_Call {
	return &Querier_RevokeRefreshToken_Call{Call: _e.mock.On("RevokeRefreshToken", ctx, tokenHash)}
}

func (_c *Querier_RevokeRefreshToken_Call) Run(run func(ctx context.Context, tokenHash string)) *Querier_RevokeRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Querier_RevokeRefreshToken_Call) Return(err error) *Querier_RevokeRefreshToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Querier_RevokeRefreshToken_Call) RunAndReturn(run func(ctx context.Context, tokenHash string) error) *Querier_RevokeRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStats provides a mock function for the type Querier
func (_mock *Querier) UpdateStats(ctx context.Context, arg db.UpdateStatsParams) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStats")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateStatsParams) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Querier_UpdateStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStats'
type Querier_UpdateStats_Call struct {
	*mock.Call
}

// UpdateStats is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateStatsParams
func (_e *Querier_Expecter) UpdateStats(ctx interface{}, arg interface{}) *Querier_UpdateStats_Call {
	return &Querier_UpdateStats_Call{Call: _e.mock.On("UpdateStats", ctx, arg)}
}

func (_c *Querier_UpdateStats_Call) Run(run func(ctx context.Context, arg db.UpdateStatsParams)) *Querier_UpdateStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.UpdateStatsParams
		if args[1] != nil {
			arg1 = args[1].(db.UpdateStatsParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Querier_UpdateStats_Call) Return(err error) *Querier_UpdateStats_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Querier_UpdateStats_Call) RunAndReturn(run func(ctx context.Context, arg db.UpdateStatsParams) error) *Querier_UpdateStats_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type Querier
func (_mock *Querier) UpdateUser(ctx context.Context, arg db.UpdateUserParams) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateUserParams) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Querier_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type Querier_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateUserParams
func (_e *Querier_Expecter) UpdateUser(ctx interface{}, arg interface{}) *Querier_UpdateUser_Call {
	return &Querier_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, arg)}
}

func (_c *Querier_UpdateUser_Call) Run(run func(ctx context.Context, arg db.UpdateUserParams)) *Querier_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.UpdateUserParams
		if args[1] != nil {
			arg1 = args[1].(db.UpdateUserParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Querier_UpdateUser_Call) Return(err error) *Querier_UpdateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Querier_UpdateUser_Call) RunAndReturn(run func(ctx context.Context, arg db.UpdateUserParams) error) *Querier_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserAvatar provides a mock function for the type Querier
func (_mock *Querier) UpdateUserAvatar(ctx context.Context, arg db.UpdateUserAvatarParams) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserAvatar")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateUserAvatarParams) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Querier_UpdateUserAvatar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserAvatar'
type Querier_UpdateUserAvatar_Call struct {
	*mock.Call
}

// UpdateUserAvatar is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateUserAvatarParams
func (_e *Querier_Expecter) UpdateUserAvatar(ctx interface{}, arg interface{}) *Querier_UpdateUserAvatar_Call {
	return &Querier_UpdateUserAvatar_Call{Call: _e.mock.On("UpdateUserAvatar", ctx, arg)}
}

func (_c *Querier_UpdateUserAvatar_Call) Run(run func(ctx context.Context, arg db.UpdateUserAvatarParams)) *Querier_UpdateUserAvatar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.UpdateUserAvatarParams
		if args[1] != nil {
			arg1 = args[1].(db.UpdateUserAvatarParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Querier_UpdateUserAvatar_Call) Return(err error) *Querier_UpdateUserAvatar_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Querier_UpdateUserAvatar_Call) RunAndReturn(run func(ctx context.Context, arg db.UpdateUserAvatarParams) error) *Querier_UpdateUserAvatar_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserPassword provides a mock function for the type Querier
func (_mock *Querier) UpdateUserPassword(ctx context.Context, arg db.UpdateUserPasswordParams) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPassword")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateUserPasswordParams) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Querier_UpdateUserPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserPassword'
type Querier_UpdateUserPassword_Call struct {
	*mock.Call
}

// UpdateUserPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateUserPasswordParams
func (_e *Querier_Expecter) UpdateUserPassword(ctx interface{}, arg interface{}) *Querier_UpdateUserPassword_Call {
	return &Querier_UpdateUserPassword_Call{Call: _e.mock.On("UpdateUserPassword", ctx, arg)}
}

func (_c *Querier_UpdateUserPassword_Call) Run(run func(ctx context.Context, arg db.UpdateUserPasswordParams)) *Querier_UpdateUserPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.UpdateUserPasswordParams
		if args[1] != nil {
			arg1 = args[1].(db.UpdateUserPasswordParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Querier_UpdateUserPassword_Call) Return(err error) *Querier_UpdateUserPassword_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Querier_UpdateUserPassword_Call) RunAndReturn(run func(ctx context.Context, arg db.UpdateUserPasswordParams) error) *Querier_UpdateUserPassword_Call {
	_c.Call.Return(run)
	return _c
}
