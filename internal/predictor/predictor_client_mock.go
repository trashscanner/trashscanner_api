// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package predictor

import (
	"context"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
	"net/http"
)

// newMockPredictRequester creates a new instance of mockPredictRequester. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockPredictRequester(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockPredictRequester {
	mock := &mockPredictRequester{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockPredictRequester is an autogenerated mock type for the predictRequester type
type mockPredictRequester struct {
	mock.Mock
}

type mockPredictRequester_Expecter struct {
	mock *mock.Mock
}

func (_m *mockPredictRequester) EXPECT() *mockPredictRequester_Expecter {
	return &mockPredictRequester_Expecter{mock: &_m.Mock}
}

// RequestPredict provides a mock function for the type mockPredictRequester
func (_mock *mockPredictRequester) RequestPredict(ctx context.Context, scanURL string, predictionID uuid.UUID, optHeaders ...http.Header) (*predictResponse, error) {
	var tmpRet mock.Arguments
	if len(optHeaders) > 0 {
		tmpRet = _mock.Called(ctx, scanURL, predictionID, optHeaders)
	} else {
		tmpRet = _mock.Called(ctx, scanURL, predictionID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RequestPredict")
	}

	var r0 *predictResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, ...http.Header) (*predictResponse, error)); ok {
		return returnFunc(ctx, scanURL, predictionID, optHeaders...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, ...http.Header) *predictResponse); ok {
		r0 = returnFunc(ctx, scanURL, predictionID, optHeaders...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*predictResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, uuid.UUID, ...http.Header) error); ok {
		r1 = returnFunc(ctx, scanURL, predictionID, optHeaders...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockPredictRequester_RequestPredict_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestPredict'
type mockPredictRequester_RequestPredict_Call struct {
	*mock.Call
}

// RequestPredict is a helper method to define mock.On call
//   - ctx context.Context
//   - scanURL string
//   - predictionID uuid.UUID
//   - optHeaders ...http.Header
func (_e *mockPredictRequester_Expecter) RequestPredict(ctx interface{}, scanURL interface{}, predictionID interface{}, optHeaders ...interface{}) *mockPredictRequester_RequestPredict_Call {
	return &mockPredictRequester_RequestPredict_Call{Call: _e.mock.On("RequestPredict",
		append([]interface{}{ctx, scanURL, predictionID}, optHeaders...)...)}
}

func (_c *mockPredictRequester_RequestPredict_Call) Run(run func(ctx context.Context, scanURL string, predictionID uuid.UUID, optHeaders ...http.Header)) *mockPredictRequester_RequestPredict_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 []http.Header
		var variadicArgs []http.Header
		if len(args) > 3 {
			variadicArgs = args[3].([]http.Header)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *mockPredictRequester_RequestPredict_Call) Return(predictResponseMoqParam *predictResponse, err error) *mockPredictRequester_RequestPredict_Call {
	_c.Call.Return(predictResponseMoqParam, err)
	return _c
}

func (_c *mockPredictRequester_RequestPredict_Call) RunAndReturn(run func(ctx context.Context, scanURL string, predictionID uuid.UUID, optHeaders ...http.Header) (*predictResponse, error)) *mockPredictRequester_RequestPredict_Call {
	_c.Call.Return(run)
	return _c
}
