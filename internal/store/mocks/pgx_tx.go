// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	mock "github.com/stretchr/testify/mock"
)

// NewTx creates a new instance of Tx. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTx(t interface {
	mock.TestingT
	Cleanup(func())
}) *Tx {
	mock := &Tx{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Tx is an autogenerated mock type for the Tx type
type Tx struct {
	mock.Mock
}

type Tx_Expecter struct {
	mock *mock.Mock
}

func (_m *Tx) EXPECT() *Tx_Expecter {
	return &Tx_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function for the type Tx
func (_mock *Tx) Begin(ctx context.Context) (pgx.Tx, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 pgx.Tx
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (pgx.Tx, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) pgx.Tx); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Tx)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Tx_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type Tx_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Tx_Expecter) Begin(ctx interface{}) *Tx_Begin_Call {
	return &Tx_Begin_Call{Call: _e.mock.On("Begin", ctx)}
}

func (_c *Tx_Begin_Call) Run(run func(ctx context.Context)) *Tx_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Tx_Begin_Call) Return(tx pgx.Tx, err error) *Tx_Begin_Call {
	_c.Call.Return(tx, err)
	return _c
}

func (_c *Tx_Begin_Call) RunAndReturn(run func(ctx context.Context) (pgx.Tx, error)) *Tx_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function for the type Tx
func (_mock *Tx) Commit(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Tx_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type Tx_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Tx_Expecter) Commit(ctx interface{}) *Tx_Commit_Call {
	return &Tx_Commit_Call{Call: _e.mock.On("Commit", ctx)}
}

func (_c *Tx_Commit_Call) Run(run func(ctx context.Context)) *Tx_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Tx_Commit_Call) Return(err error) *Tx_Commit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Tx_Commit_Call) RunAndReturn(run func(ctx context.Context) error) *Tx_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Conn provides a mock function for the type Tx
func (_mock *Tx) Conn() *pgx.Conn {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Conn")
	}

	var r0 *pgx.Conn
	if returnFunc, ok := ret.Get(0).(func() *pgx.Conn); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgx.Conn)
		}
	}
	return r0
}

// Tx_Conn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Conn'
type Tx_Conn_Call struct {
	*mock.Call
}

// Conn is a helper method to define mock.On call
func (_e *Tx_Expecter) Conn() *Tx_Conn_Call {
	return &Tx_Conn_Call{Call: _e.mock.On("Conn")}
}

func (_c *Tx_Conn_Call) Run(run func()) *Tx_Conn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Tx_Conn_Call) Return(conn *pgx.Conn) *Tx_Conn_Call {
	_c.Call.Return(conn)
	return _c
}

func (_c *Tx_Conn_Call) RunAndReturn(run func() *pgx.Conn) *Tx_Conn_Call {
	_c.Call.Return(run)
	return _c
}

// CopyFrom provides a mock function for the type Tx
func (_mock *Tx) CopyFrom(ctx context.Context, tableName pgx.Identifier, columnNames []string, rowSrc pgx.CopyFromSource) (int64, error) {
	ret := _mock.Called(ctx, tableName, columnNames, rowSrc)

	if len(ret) == 0 {
		panic("no return value specified for CopyFrom")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgx.Identifier, []string, pgx.CopyFromSource) (int64, error)); ok {
		return returnFunc(ctx, tableName, columnNames, rowSrc)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgx.Identifier, []string, pgx.CopyFromSource) int64); ok {
		r0 = returnFunc(ctx, tableName, columnNames, rowSrc)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pgx.Identifier, []string, pgx.CopyFromSource) error); ok {
		r1 = returnFunc(ctx, tableName, columnNames, rowSrc)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Tx_CopyFrom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyFrom'
type Tx_CopyFrom_Call struct {
	*mock.Call
}

// CopyFrom is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName pgx.Identifier
//   - columnNames []string
//   - rowSrc pgx.CopyFromSource
func (_e *Tx_Expecter) CopyFrom(ctx interface{}, tableName interface{}, columnNames interface{}, rowSrc interface{}) *Tx_CopyFrom_Call {
	return &Tx_CopyFrom_Call{Call: _e.mock.On("CopyFrom", ctx, tableName, columnNames, rowSrc)}
}

func (_c *Tx_CopyFrom_Call) Run(run func(ctx context.Context, tableName pgx.Identifier, columnNames []string, rowSrc pgx.CopyFromSource)) *Tx_CopyFrom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pgx.Identifier
		if args[1] != nil {
			arg1 = args[1].(pgx.Identifier)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		var arg3 pgx.CopyFromSource
		if args[3] != nil {
			arg3 = args[3].(pgx.CopyFromSource)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *Tx_CopyFrom_Call) Return(n int64, err error) *Tx_CopyFrom_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *Tx_CopyFrom_Call) RunAndReturn(run func(ctx context.Context, tableName pgx.Identifier, columnNames []string, rowSrc pgx.CopyFromSource) (int64, error)) *Tx_CopyFrom_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function for the type Tx
func (_mock *Tx) Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error) {
	var tmpRet mock.Arguments
	if len(arguments) > 0 {
		tmpRet = _mock.Called(ctx, sql, arguments)
	} else {
		tmpRet = _mock.Called(ctx, sql)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 pgconn.CommandTag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) (pgconn.CommandTag, error)); ok {
		return returnFunc(ctx, sql, arguments...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) pgconn.CommandTag); ok {
		r0 = returnFunc(ctx, sql, arguments...)
	} else {
		r0 = ret.Get(0).(pgconn.CommandTag)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...any) error); ok {
		r1 = returnFunc(ctx, sql, arguments...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Tx_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type Tx_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - sql string
//   - arguments ...any
func (_e *Tx_Expecter) Exec(ctx interface{}, sql interface{}, arguments ...interface{}) *Tx_Exec_Call {
	return &Tx_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{ctx, sql}, arguments...)...)}
}

func (_c *Tx_Exec_Call) Run(run func(ctx context.Context, sql string, arguments ...any)) *Tx_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Tx_Exec_Call) Return(commandTag pgconn.CommandTag, err error) *Tx_Exec_Call {
	_c.Call.Return(commandTag, err)
	return _c
}

func (_c *Tx_Exec_Call) RunAndReturn(run func(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)) *Tx_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// LargeObjects provides a mock function for the type Tx
func (_mock *Tx) LargeObjects() pgx.LargeObjects {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LargeObjects")
	}

	var r0 pgx.LargeObjects
	if returnFunc, ok := ret.Get(0).(func() pgx.LargeObjects); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(pgx.LargeObjects)
	}
	return r0
}

// Tx_LargeObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LargeObjects'
type Tx_LargeObjects_Call struct {
	*mock.Call
}

// LargeObjects is a helper method to define mock.On call
func (_e *Tx_Expecter) LargeObjects() *Tx_LargeObjects_Call {
	return &Tx_LargeObjects_Call{Call: _e.mock.On("LargeObjects")}
}

func (_c *Tx_LargeObjects_Call) Run(run func()) *Tx_LargeObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Tx_LargeObjects_Call) Return(largeObjects pgx.LargeObjects) *Tx_LargeObjects_Call {
	_c.Call.Return(largeObjects)
	return _c
}

func (_c *Tx_LargeObjects_Call) RunAndReturn(run func() pgx.LargeObjects) *Tx_LargeObjects_Call {
	_c.Call.Return(run)
	return _c
}

// Prepare provides a mock function for the type Tx
func (_mock *Tx) Prepare(ctx context.Context, name string, sql string) (*pgconn.StatementDescription, error) {
	ret := _mock.Called(ctx, name, sql)

	if len(ret) == 0 {
		panic("no return value specified for Prepare")
	}

	var r0 *pgconn.StatementDescription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*pgconn.StatementDescription, error)); ok {
		return returnFunc(ctx, name, sql)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *pgconn.StatementDescription); ok {
		r0 = returnFunc(ctx, name, sql)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgconn.StatementDescription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, name, sql)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Tx_Prepare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prepare'
type Tx_Prepare_Call struct {
	*mock.Call
}

// Prepare is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - sql string
func (_e *Tx_Expecter) Prepare(ctx interface{}, name interface{}, sql interface{}) *Tx_Prepare_Call {
	return &Tx_Prepare_Call{Call: _e.mock.On("Prepare", ctx, name, sql)}
}

func (_c *Tx_Prepare_Call) Run(run func(ctx context.Context, name string, sql string)) *Tx_Prepare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Tx_Prepare_Call) Return(statementDescription *pgconn.StatementDescription, err error) *Tx_Prepare_Call {
	_c.Call.Return(statementDescription, err)
	return _c
}

func (_c *Tx_Prepare_Call) RunAndReturn(run func(ctx context.Context, name string, sql string) (*pgconn.StatementDescription, error)) *Tx_Prepare_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function for the type Tx
func (_mock *Tx) Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, sql, args)
	} else {
		tmpRet = _mock.Called(ctx, sql)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 pgx.Rows
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) (pgx.Rows, error)); ok {
		return returnFunc(ctx, sql, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) pgx.Rows); ok {
		r0 = returnFunc(ctx, sql, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Rows)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...any) error); ok {
		r1 = returnFunc(ctx, sql, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Tx_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type Tx_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - sql string
//   - args ...any
func (_e *Tx_Expecter) Query(ctx interface{}, sql interface{}, args ...interface{}) *Tx_Query_Call {
	return &Tx_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, sql}, args...)...)}
}

func (_c *Tx_Query_Call) Run(run func(ctx context.Context, sql string, args ...any)) *Tx_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Tx_Query_Call) Return(rows pgx.Rows, err error) *Tx_Query_Call {
	_c.Call.Return(rows, err)
	return _c
}

func (_c *Tx_Query_Call) RunAndReturn(run func(ctx context.Context, sql string, args ...any) (pgx.Rows, error)) *Tx_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function for the type Tx
func (_mock *Tx) QueryRow(ctx context.Context, sql string, args ...any) pgx.Row {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, sql, args)
	} else {
		tmpRet = _mock.Called(ctx, sql)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 pgx.Row
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) pgx.Row); ok {
		r0 = returnFunc(ctx, sql, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Row)
		}
	}
	return r0
}

// Tx_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type Tx_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - ctx context.Context
//   - sql string
//   - args ...any
func (_e *Tx_Expecter) QueryRow(ctx interface{}, sql interface{}, args ...interface{}) *Tx_QueryRow_Call {
	return &Tx_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{ctx, sql}, args...)...)}
}

func (_c *Tx_QueryRow_Call) Run(run func(ctx context.Context, sql string, args ...any)) *Tx_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Tx_QueryRow_Call) Return(row pgx.Row) *Tx_QueryRow_Call {
	_c.Call.Return(row)
	return _c
}

func (_c *Tx_QueryRow_Call) RunAndReturn(run func(ctx context.Context, sql string, args ...any) pgx.Row) *Tx_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function for the type Tx
func (_mock *Tx) Rollback(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Tx_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type Tx_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Tx_Expecter) Rollback(ctx interface{}) *Tx_Rollback_Call {
	return &Tx_Rollback_Call{Call: _e.mock.On("Rollback", ctx)}
}

func (_c *Tx_Rollback_Call) Run(run func(ctx context.Context)) *Tx_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Tx_Rollback_Call) Return(err error) *Tx_Rollback_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Tx_Rollback_Call) RunAndReturn(run func(ctx context.Context) error) *Tx_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// SendBatch provides a mock function for the type Tx
func (_mock *Tx) SendBatch(ctx context.Context, b *pgx.Batch) pgx.BatchResults {
	ret := _mock.Called(ctx, b)

	if len(ret) == 0 {
		panic("no return value specified for SendBatch")
	}

	var r0 pgx.BatchResults
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pgx.Batch) pgx.BatchResults); ok {
		r0 = returnFunc(ctx, b)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.BatchResults)
		}
	}
	return r0
}

// Tx_SendBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendBatch'
type Tx_SendBatch_Call struct {
	*mock.Call
}

// SendBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - b *pgx.Batch
func (_e *Tx_Expecter) SendBatch(ctx interface{}, b interface{}) *Tx_SendBatch_Call {
	return &Tx_SendBatch_Call{Call: _e.mock.On("SendBatch", ctx, b)}
}

func (_c *Tx_SendBatch_Call) Run(run func(ctx context.Context, b *pgx.Batch)) *Tx_SendBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pgx.Batch
		if args[1] != nil {
			arg1 = args[1].(*pgx.Batch)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Tx_SendBatch_Call) Return(batchResults pgx.BatchResults) *Tx_SendBatch_Call {
	_c.Call.Return(batchResults)
	return _c
}

func (_c *Tx_SendBatch_Call) RunAndReturn(run func(ctx context.Context, b *pgx.Batch) pgx.BatchResults) *Tx_SendBatch_Call {
	_c.Call.Return(run)
	return _c
}
