// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
	mock "github.com/stretchr/testify/mock"
	"github.com/trashscanner/trashscanner_api/internal/database/sqlc/db"
	"github.com/trashscanner/trashscanner_api/internal/models"
)

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

type Store_Expecter struct {
	mock *mock.Mock
}

func (_m *Store) EXPECT() *Store_Expecter {
	return &Store_Expecter{mock: &_m.Mock}
}

// BeginTx provides a mock function for the type Store
func (_mock *Store) BeginTx(ctx context.Context) (pgx.Tx, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 pgx.Tx
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (pgx.Tx, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) pgx.Tx); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Tx)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Store_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type Store_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Store_Expecter) BeginTx(ctx interface{}) *Store_BeginTx_Call {
	return &Store_BeginTx_Call{Call: _e.mock.On("BeginTx", ctx)}
}

func (_c *Store_BeginTx_Call) Run(run func(ctx context.Context)) *Store_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Store_BeginTx_Call) Return(tx pgx.Tx, err error) *Store_BeginTx_Call {
	_c.Call.Return(tx, err)
	return _c
}

func (_c *Store_BeginTx_Call) RunAndReturn(run func(ctx context.Context) (pgx.Tx, error)) *Store_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type Store
func (_mock *Store) Close() {
	_mock.Called()
	return
}

// Store_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Store_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Store_Expecter) Close() *Store_Close_Call {
	return &Store_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Store_Close_Call) Run(run func()) *Store_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Store_Close_Call) Return() *Store_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *Store_Close_Call) RunAndReturn(run func()) *Store_Close_Call {
	_c.Run(run)
	return _c
}

// Conn provides a mock function for the type Store
func (_mock *Store) Conn() *pgxpool.Pool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Conn")
	}

	var r0 *pgxpool.Pool
	if returnFunc, ok := ret.Get(0).(func() *pgxpool.Pool); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgxpool.Pool)
		}
	}
	return r0
}

// Store_Conn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Conn'
type Store_Conn_Call struct {
	*mock.Call
}

// Conn is a helper method to define mock.On call
func (_e *Store_Expecter) Conn() *Store_Conn_Call {
	return &Store_Conn_Call{Call: _e.mock.On("Conn")}
}

func (_c *Store_Conn_Call) Run(run func()) *Store_Conn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Store_Conn_Call) Return(pool *pgxpool.Pool) *Store_Conn_Call {
	_c.Call.Return(pool)
	return _c
}

func (_c *Store_Conn_Call) RunAndReturn(run func() *pgxpool.Pool) *Store_Conn_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type Store
func (_mock *Store) CreateUser(ctx context.Context, user *models.User) error {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Store_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type Store_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *models.User
func (_e *Store_Expecter) CreateUser(ctx interface{}, user interface{}) *Store_CreateUser_Call {
	return &Store_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *Store_CreateUser_Call) Run(run func(ctx context.Context, user *models.User)) *Store_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.User
		if args[1] != nil {
			arg1 = args[1].(*models.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Store_CreateUser_Call) Return(err error) *Store_CreateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Store_CreateUser_Call) RunAndReturn(run func(ctx context.Context, user *models.User) error) *Store_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type Store
func (_mock *Store) DeleteUser(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Store_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type Store_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Store_Expecter) DeleteUser(ctx interface{}, id interface{}) *Store_DeleteUser_Call {
	return &Store_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *Store_DeleteUser_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Store_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Store_DeleteUser_Call) Return(err error) *Store_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Store_DeleteUser_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *Store_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// ExecTx provides a mock function for the type Store
func (_mock *Store) ExecTx(ctx context.Context, fn func(db.Querier) error) error {
	ret := _mock.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for ExecTx")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, func(db.Querier) error) error); ok {
		r0 = returnFunc(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Store_ExecTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecTx'
type Store_ExecTx_Call struct {
	*mock.Call
}

// ExecTx is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(db.Querier) error
func (_e *Store_Expecter) ExecTx(ctx interface{}, fn interface{}) *Store_ExecTx_Call {
	return &Store_ExecTx_Call{Call: _e.mock.On("ExecTx", ctx, fn)}
}

func (_c *Store_ExecTx_Call) Run(run func(ctx context.Context, fn func(db.Querier) error)) *Store_ExecTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 func(db.Querier) error
		if args[1] != nil {
			arg1 = args[1].(func(db.Querier) error)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Store_ExecTx_Call) Return(err error) *Store_ExecTx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Store_ExecTx_Call) RunAndReturn(run func(ctx context.Context, fn func(db.Querier) error) error) *Store_ExecTx_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type Store
func (_mock *Store) GetUser(ctx context.Context, id uuid.UUID, withStats bool) (*models.User, error) {
	ret := _mock.Called(ctx, id, withStats)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool) (*models.User, error)); ok {
		return returnFunc(ctx, id, withStats)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool) *models.User); ok {
		r0 = returnFunc(ctx, id, withStats)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, bool) error); ok {
		r1 = returnFunc(ctx, id, withStats)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Store_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type Store_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - withStats bool
func (_e *Store_Expecter) GetUser(ctx interface{}, id interface{}, withStats interface{}) *Store_GetUser_Call {
	return &Store_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id, withStats)}
}

func (_c *Store_GetUser_Call) Run(run func(ctx context.Context, id uuid.UUID, withStats bool)) *Store_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Store_GetUser_Call) Return(user *models.User, err error) *Store_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *Store_GetUser_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, withStats bool) (*models.User, error)) *Store_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAvatar provides a mock function for the type Store
func (_mock *Store) UpdateAvatar(ctx context.Context, id uuid.UUID, avatarURL string) error {
	ret := _mock.Called(ctx, id, avatarURL)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAvatar")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = returnFunc(ctx, id, avatarURL)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Store_UpdateAvatar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAvatar'
type Store_UpdateAvatar_Call struct {
	*mock.Call
}

// UpdateAvatar is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - avatarURL string
func (_e *Store_Expecter) UpdateAvatar(ctx interface{}, id interface{}, avatarURL interface{}) *Store_UpdateAvatar_Call {
	return &Store_UpdateAvatar_Call{Call: _e.mock.On("UpdateAvatar", ctx, id, avatarURL)}
}

func (_c *Store_UpdateAvatar_Call) Run(run func(ctx context.Context, id uuid.UUID, avatarURL string)) *Store_UpdateAvatar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Store_UpdateAvatar_Call) Return(err error) *Store_UpdateAvatar_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Store_UpdateAvatar_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, avatarURL string) error) *Store_UpdateAvatar_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserPass provides a mock function for the type Store
func (_mock *Store) UpdateUserPass(ctx context.Context, id uuid.UUID, newHashedPass string) error {
	ret := _mock.Called(ctx, id, newHashedPass)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPass")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = returnFunc(ctx, id, newHashedPass)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Store_UpdateUserPass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserPass'
type Store_UpdateUserPass_Call struct {
	*mock.Call
}

// UpdateUserPass is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - newHashedPass string
func (_e *Store_Expecter) UpdateUserPass(ctx interface{}, id interface{}, newHashedPass interface{}) *Store_UpdateUserPass_Call {
	return &Store_UpdateUserPass_Call{Call: _e.mock.On("UpdateUserPass", ctx, id, newHashedPass)}
}

func (_c *Store_UpdateUserPass_Call) Run(run func(ctx context.Context, id uuid.UUID, newHashedPass string)) *Store_UpdateUserPass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Store_UpdateUserPass_Call) Return(err error) *Store_UpdateUserPass_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Store_UpdateUserPass_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, newHashedPass string) error) *Store_UpdateUserPass_Call {
	_c.Call.Return(run)
	return _c
}

// WithTx provides a mock function for the type Store
func (_mock *Store) WithTx(tx pgx.Tx) db.Querier {
	ret := _mock.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 db.Querier
	if returnFunc, ok := ret.Get(0).(func(pgx.Tx) db.Querier); ok {
		r0 = returnFunc(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Querier)
		}
	}
	return r0
}

// Store_WithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTx'
type Store_WithTx_Call struct {
	*mock.Call
}

// WithTx is a helper method to define mock.On call
//   - tx pgx.Tx
func (_e *Store_Expecter) WithTx(tx interface{}) *Store_WithTx_Call {
	return &Store_WithTx_Call{Call: _e.mock.On("WithTx", tx)}
}

func (_c *Store_WithTx_Call) Run(run func(tx pgx.Tx)) *Store_WithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 pgx.Tx
		if args[0] != nil {
			arg0 = args[0].(pgx.Tx)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Store_WithTx_Call) Return(querier db.Querier) *Store_WithTx_Call {
	_c.Call.Return(querier)
	return _c
}

func (_c *Store_WithTx_Call) RunAndReturn(run func(tx pgx.Tx) db.Querier) *Store_WithTx_Call {
	_c.Call.Return(run)
	return _c
}
