// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"github.com/jackc/pgx/v5"
	mock "github.com/stretchr/testify/mock"
)

// NewConnection creates a new instance of Connection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnection(t interface {
	mock.TestingT
	Cleanup(func())
}) *Connection {
	mock := &Connection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Connection is an autogenerated mock type for the Connection type
type Connection struct {
	mock.Mock
}

type Connection_Expecter struct {
	mock *mock.Mock
}

func (_m *Connection) EXPECT() *Connection_Expecter {
	return &Connection_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function for the type Connection
func (_mock *Connection) Begin(ctx context.Context) (pgx.Tx, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 pgx.Tx
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (pgx.Tx, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) pgx.Tx); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Tx)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Connection_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type Connection_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Connection_Expecter) Begin(ctx interface{}) *Connection_Begin_Call {
	return &Connection_Begin_Call{Call: _e.mock.On("Begin", ctx)}
}

func (_c *Connection_Begin_Call) Run(run func(ctx context.Context)) *Connection_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Connection_Begin_Call) Return(tx pgx.Tx, err error) *Connection_Begin_Call {
	_c.Call.Return(tx, err)
	return _c
}

func (_c *Connection_Begin_Call) RunAndReturn(run func(ctx context.Context) (pgx.Tx, error)) *Connection_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type Connection
func (_mock *Connection) Close() {
	_mock.Called()
	return
}

// Connection_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Connection_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Connection_Expecter) Close() *Connection_Close_Call {
	return &Connection_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Connection_Close_Call) Run(run func()) *Connection_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Connection_Close_Call) Return() *Connection_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *Connection_Close_Call) RunAndReturn(run func()) *Connection_Close_Call {
	_c.Run(run)
	return _c
}
