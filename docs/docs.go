// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "description": "Authenticate user and return JWT tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AuthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tokens for existing user",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthResponse"
                        }
                    },
                    "201": {
                        "description": "Tokens for newly created user",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/errlocal.ErrBadRequest"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/errlocal.ErrUnauthorized"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errlocal.ErrInternal"
                        }
                    }
                }
            }
        },
        "/refresh": {
            "post": {
                "description": "Get new access token using refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RefreshRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "New tokens",
                        "schema": {
                            "$ref": "#/definitions/dto.RefreshResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/errlocal.ErrBadRequest"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/errlocal.ErrUnauthorized"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errlocal.ErrInternal"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get user details by ID (requires authentication)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user information",
                "responses": {
                    "200": {
                        "description": "User information",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errlocal.ErrUnauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden - user ID mismatch",
                        "schema": {
                            "$ref": "#/definitions/errlocal.ErrForbidden"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/errlocal.ErrNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errlocal.ErrInternal"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete the authenticated user's account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete user account",
                "responses": {
                    "204": {
                        "description": "User deleted successfully"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errlocal.ErrUnauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden - user ID mismatch",
                        "schema": {
                            "$ref": "#/definitions/errlocal.ErrForbidden"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/errlocal.ErrNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errlocal.ErrInternal"
                        }
                    }
                }
            }
        },
        "/users/me/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Revoke all tokens for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "User logged out successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errlocal.ErrUnauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden - user ID mismatch",
                        "schema": {
                            "$ref": "#/definitions/errlocal.ErrForbidden"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/errlocal.ErrNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errlocal.ErrInternal"
                        }
                    }
                }
            }
        },
        "/users/me/switch-password": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change the password of the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Switch user password",
                "parameters": [
                    {
                        "description": "New password details",
                        "name": "switchPasswordRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SwitchPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Password changed successfully"
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/errlocal.ErrBadRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errlocal.ErrUnauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden - user ID mismatch",
                        "schema": {
                            "$ref": "#/definitions/errlocal.ErrForbidden"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/errlocal.ErrNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errlocal.ErrInternal"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AuthRequest": {
            "type": "object",
            "required": [
                "login",
                "password"
            ],
            "properties": {
                "login": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 3
                },
                "password": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 8
                }
            }
        },
        "dto.AuthResponse": {
            "type": "object",
            "properties": {
                "tokens": {
                    "$ref": "#/definitions/dto.Tokens"
                },
                "user": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string"
                        },
                        "login": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "dto.RefreshRequest": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "dto.RefreshResponse": {
            "type": "object",
            "properties": {
                "tokens": {
                    "$ref": "#/definitions/dto.Tokens"
                }
            }
        },
        "dto.SwitchPasswordRequest": {
            "type": "object",
            "required": [
                "new_password",
                "old_password"
            ],
            "properties": {
                "new_password": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 8
                },
                "old_password": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 8
                }
            }
        },
        "dto.Tokens": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "dto.UserResponse": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "login": {
                    "type": "string"
                },
                "stat": {
                    "$ref": "#/definitions/models.Stat"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "errlocal.ErrBadRequest": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "message": {
                    "type": "string"
                },
                "system": {
                    "type": "string"
                }
            }
        },
        "errlocal.ErrForbidden": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "message": {
                    "type": "string"
                },
                "system": {
                    "type": "string"
                }
            }
        },
        "errlocal.ErrInternal": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "message": {
                    "type": "string"
                },
                "system": {
                    "type": "string"
                }
            }
        },
        "errlocal.ErrNotFound": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "message": {
                    "type": "string"
                },
                "system": {
                    "type": "string"
                }
            }
        },
        "errlocal.ErrUnauthorized": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "message": {
                    "type": "string"
                },
                "system": {
                    "type": "string"
                }
            }
        },
        "models.Stat": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "files_scanned": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "last_scanned_at": {
                    "type": "string"
                },
                "rating": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/models.UserStatus"
                },
                "total_weight": {
                    "type": "number"
                },
                "trash_by_types": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.UserStatus": {
            "type": "string",
            "enum": [
                "newbie",
                "eco_scout",
                "green_guard",
                "eco_warrior",
                "nature_hero",
                "earth_defender",
                "eco_champion",
                "planet_guardian",
                "eco_legend"
            ],
            "x-enum-comments": {
                "UserStatusEarthDefend": "Защитник Земли",
                "UserStatusEcoChampion": "Эко-чемпион",
                "UserStatusEcoLegend": "Эко-легенда",
                "UserStatusEcoScout": "Эко-разведчик",
                "UserStatusEcoWarrior": "Эко-воин",
                "UserStatusGreenGuard": "Зеленый страж",
                "UserStatusNatureHero": "Герой природы",
                "UserStatusNewbie": "Новичок",
                "UserStatusPlanetGuard": "Хранитель планеты"
            },
            "x-enum-descriptions": [
                "Новичок",
                "Эко-разведчик",
                "Зеленый страж",
                "Эко-воин",
                "Герой природы",
                "Защитник Земли",
                "Эко-чемпион",
                "Хранитель планеты",
                "Эко-легенда"
            ],
            "x-enum-varnames": [
                "UserStatusNewbie",
                "UserStatusEcoScout",
                "UserStatusGreenGuard",
                "UserStatusEcoWarrior",
                "UserStatusNatureHero",
                "UserStatusEarthDefend",
                "UserStatusEcoChampion",
                "UserStatusPlanetGuard",
                "UserStatusEcoLegend"
            ]
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "TrashScanner API",
	Description:      "This is a sample server TrashScanner API.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
